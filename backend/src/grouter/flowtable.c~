#include "flowtable.h"
#include <sys/socket.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <netdb.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <arpa/inet.h> 

struct message{
	int src_mac[6];
	int dest_mac[6];
	int src_ip[4];
	int dest_ip[4];
	int protocol;
	int tos;
};

int callServerToFindInterface()
{
	
    int sockfd = 0, n = 0, interface = -1;
    char recvBuff[1024];
    struct sockaddr_in serv_addr; 
void *buffer;
    char *ip_addr = "132.206.55.121";


buffer = malloc(1024);
    struct message m, *temp;
    m.src_mac[0] = 2;
    m.src_mac[1] = 2;
    m.src_mac[2] = 2;
    m.src_mac[3] = 2;
    m.src_mac[4] = 2;
    m.src_mac[5] = 2;

    m.dest_mac[0] = 3;
    m.dest_mac[1] = 3;
    m.dest_mac[2] = 3;
    m.dest_mac[3] = 3;
    m.dest_mac[4] = 3;
    m.dest_mac[5] = 3;

    m.src_ip[0] = 4;
    m.src_ip[1] = 4;
    m.src_ip[2] = 4;
    m.src_ip[3] = 4;

    m.dest_ip[0] = 5;
    m.dest_ip[1] = 5;
    m.dest_ip[2] = 5;
    m.dest_ip[3] = 5;

    m.protocol = 8;
    m.tos = 8;

    
    temp = &m;


    memset(recvBuff, '0',sizeof(recvBuff));
    if((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0)
    {
        printf("\n Error : Could not create socket \n");
        return 1;
    } 

    memset(&serv_addr, '0', sizeof(serv_addr)); 

    serv_addr.sin_family = AF_INET;
    serv_addr.sin_port = htons(5001); 

    if(inet_pton(AF_INET, ip_addr, &serv_addr.sin_addr)<=0)
    {
        printf("\n inet_pton error occured\n");
        return 1;
    } 


    if( connect(sockfd, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0)
    {
       printf("\n Error : Connect Failed \n");
       return 1;
    } 
       printf("\n Connection Achieved \n");

/*
    if (send(sockfd,buffer,sizeof(buffer),0) <0)
        printf ("error\n");
    else
        printf ("packet send done");*/

    memcpy(buffer, (void*)temp, sizeof(m));
    //snprintf(buffer, sizeof(buffer), "%s\n", "This is query for server!!!");
         printf("\n Memcpy Achieved \n");

  struct message *temp2;
	temp2 = (struct message*)buffer;
		printf("\nMac is: %d %d %d %d %d %d\n",temp2->src_mac[0],temp2->src_mac[1],temp2->src_mac[2],temp2->src_mac[3],temp2->src_mac[4],temp2->src_mac[5]); 

  printf("\nStrlen of buffer is: %d\n",sizeof(m));

  write(sockfd, buffer, sizeof(m)); 
    
    n = read(sockfd, recvBuff, sizeof(recvBuff)-1);
     if(n>0)
    {
        recvBuff[n] = 0;
        char interfaceTemp = recvBuff[0];
        interface = interfaceTemp - '0';
        
        printf("\nINTERFACE IS : %d\n",interface);
    } 

    if(n < 0)
    {
        printf("\n Read error \n");
    } 

	close(sockfd);

    return interface;



}

void process_packet_from_queue1(pthread_t *thread2, struct flowentry* flowtable) {
	
	printf("\n ******************* In process_packet_from_queue1\n");
	int iret1;
	/* Create independent threads each of which will execute function */

	struct arguments *args = (struct arguments*) malloc(
			sizeof(struct arguments)); //WILL THIS BE A PROBLEM?? SHOULD I DO MALLOC??
	args->flowtable = flowtable;
	callServerToFindInterface();
	//iret1 = pthread_create(thread2, NULL, process_packet, (void*) args);
}

void* process_packet(void * args) {

	struct arguments *args_ptr = (struct arguments *) args;

	struct flowentry* flowtable = (struct flowentry*) args_ptr->flowtable;

	printf("\nIt's going in infinite loop\n");

	while (1) {
		int count = -1;

		if (queue1->cursize > 0 ) {
			printf("\n ******************* Que size is more than 1\n");

			gpacket_t *data;
			int len;
			readQueue(queue1, (void**)&data, &len);
			gpacket_t *temp_gpacket = data;
			pkt_data_t temp_data_packet = temp_gpacket->data;
			pkt_frame_t iface = temp_gpacket->frame;

			ip_packet_t *ip_pkt;
			ip_pkt = (ip_packet_t *) temp_data_packet.data;
			printf("\nFOUND THE PACKET::\n");
			 printf("\nip_src: %d",ip_pkt->ip_src[0]);
			 printf("\nip_src: %d",ip_pkt->ip_src[1]);
			 printf("\nip_src: %d",ip_pkt->ip_src[2]);
			 printf("\nip_src: %d",ip_pkt->ip_src[3]);
			 printf("\nip_prot: %d",ip_pkt->ip_prot);
			 printf("\ndata_packet: %d",temp_data_packet.header.prot);
			 printf("\ndata_packet: %d",temp_data_packet.header.dst[0]);
			 printf("\ndata_packet: %d",temp_data_packet.header.dst[1]);
			 printf("\ndata_packet: %d",temp_data_packet.header.dst[2]);
			 printf("\ndata_packet: %d",temp_data_packet.header.dst[3]);
			 printf("\ndata_packet: %d",temp_data_packet.header.dst[4]);
			 printf("\ndata_packet: %d",temp_data_packet.header.dst[5]);

			 printf("\nSrc: %d",temp_data_packet.header.src[0]);
			 printf("\nSrc: %d",temp_data_packet.header.src[1]);
			 printf("\nSrc: %d",temp_data_packet.header.src[2]);
			 printf("\nSrc: %d",temp_data_packet.header.src[3]);
			 printf("\nSrc: %d",temp_data_packet.header.src[4]);
			 printf("\nSrc: %d",temp_data_packet.header.src[5]);
			
			//Comparision logic
/*
			bool match_found = FALSE;

			while (++count < FLOWTABLE_SIZE
					&& flowtable[count].match.protocol != 0
					&& flowtable[count].match.ip_addr_src[0] != 0) { // Check for end of flowtable entries

				if (flowtable[count].match.protocol
						!= temp_data_packet.header.prot)
					continue;

				if (flowtable[count].match.hw_addr_src[0]
						!= temp_data_packet.header.src[0])
					continue;

				if (flowtable[count].match.hw_addr_src[1]
						!= temp_data_packet.header.src[1])
					continue;

				if (flowtable[count].match.hw_addr_src[2]
						!= temp_data_packet.header.src[2])
					continue;

				if (flowtable[count].match.hw_addr_src[3]
						!= temp_data_packet.header.src[3])
					continue;

				if (flowtable[count].match.hw_addr_src[4]
						!= temp_data_packet.header.src[4])
					continue;

				if (flowtable[count].match.hw_addr_src[5]
						!= temp_data_packet.header.src[5])
					continue;

				if (flowtable[count].match.hw_addr_dest[0]
						!= temp_data_packet.header.dst[0])
					continue;

				if (flowtable[count].match.hw_addr_dest[1]
						!= temp_data_packet.header.dst[1])
					continue;

				if (flowtable[count].match.hw_addr_dest[2]
						!= temp_data_packet.header.dst[2])
					continue;

				if (flowtable[count].match.hw_addr_dest[3]
						!= temp_data_packet.header.dst[3])
					continue;

				if (flowtable[count].match.hw_addr_dest[4]
						!= temp_data_packet.header.dst[4])
					continue;

				if (flowtable[count].match.hw_addr_dest[5]
						!= temp_data_packet.header.dst[5])
					continue;

				if (flowtable[count].match.ingress_port != iface.src_interface) //Discuss how to identify ingress port
					continue;

				if (flowtable[count].match.ip_protocol != ip_pkt->ip_prot)
					continue;

				if (flowtable[count].match.ip_tos != ip_pkt->ip_tos)
					continue;

				if (flowtable[count].match.ip_addr_src[0] != ip_pkt->ip_src[0])
					continue;

				if (flowtable[count].match.ip_addr_src[1] != ip_pkt->ip_src[1])
					continue;

				if (flowtable[count].match.ip_addr_src[2] != ip_pkt->ip_src[2])
					continue;

				if (flowtable[count].match.ip_addr_src[3] != ip_pkt->ip_src[3])
					continue;

				if (flowtable[count].match.ip_addr_dest[0] != ip_pkt->ip_dst[0])
					continue;

				if (flowtable[count].match.ip_addr_dest[1] != ip_pkt->ip_dst[1])
					continue;

				if (flowtable[count].match.ip_addr_dest[2] != ip_pkt->ip_dst[2])
					continue;

				if (flowtable[count].match.ip_addr_dest[3] != ip_pkt->ip_dst[3])
					continue;

				match_found = TRUE;

				if (flowtable[count].action == FORWARD_ALL) {
					//TODO:Replicate packet for all outgoing ports and place packets in output_queue
				}

				if (flowtable[count].action == FORWARD_TO_DESTINATION) {
					temp_gpacket->frame.dst_interface =
							flowtable[count].port_number;
					printf("\nMATCH FOUND. ADDING PACKET IN OutputQ\n");
					writeQueue(outputQ, (void *)temp_gpacket, sizeof(gpacket_t));
				}

				if (flowtable[count].action == FORWARD_CONTROLLER) {
					//TODO:Change packet's outgoing port and place packets in output_queue
				}

				if (flowtable[count].action == DROP) {
					free(temp_gpacket);
				}

				//TODO:update counters
				break;

			}

			if (match_found == FALSE) {
				printf("\nMATCH NOT FOUND. ADDING PACKET IN QUEUE2\n");

				writeQueue(queue2, (void *)temp_gpacket, sizeof(gpacket_t));
			}
*/

			 if(temp_gpacket->frame.src_interface == 1){
			 				printf("\n RECEIVED PACKET FROM INTERFACE 1");

			 				temp_gpacket->frame.dst_interface = 2;			// HATA DO MUJHE

						temp_gpacket->data.header.src[0] = temp_gpacket->data.header.dst[0];
						temp_gpacket->data.header.src[1] = temp_gpacket->data.header.dst[1];
						temp_gpacket->data.header.src[2] = temp_gpacket->data.header.dst[2];
			 			temp_gpacket->data.header.src[3] = temp_gpacket->data.header.dst[3];
			 			temp_gpacket->data.header.src[4] = temp_gpacket->data.header.dst[4];
			 			temp_gpacket->data.header.src[5] = temp_gpacket->data.header.dst[5];

			 			temp_gpacket->data.header.dst[0] = 254;
			 			temp_gpacket->data.header.dst[1] = 253;
			 			temp_gpacket->data.header.dst[2] = 2;
			 			temp_gpacket->data.header.dst[3] = 0;
			 			temp_gpacket->data.header.dst[4] = 0;
			 			temp_gpacket->data.header.dst[5] = 1;

			 			temp_gpacket->data.header.src[0] = 254;
			 			temp_gpacket->data.header.src[1] = 253;
			 			temp_gpacket->data.header.src[2] = 3;
			 			temp_gpacket->data.header.src[3] = 01;
			 			temp_gpacket->data.header.src[4] = 0;
			 			temp_gpacket->data.header.src[5] = 2;

			 			temp_gpacket->frame.nxth_ip_addr[0] = 2;
			 			temp_gpacket->frame.nxth_ip_addr[1] = 3;
			 			temp_gpacket->frame.nxth_ip_addr[2] = 192;
			 			temp_gpacket->frame.nxth_ip_addr[3] = 168;
			 			}
			 			else if(temp_gpacket->frame.src_interface == 2){
			 				printf("\n RECEIVED PACKET FROM INTERFACE 2");

			 				temp_gpacket->frame.dst_interface = 1;
			 				temp_gpacket->data.header.src[0] = temp_gpacket->data.header.dst[0];
			 				temp_gpacket->data.header.src[1] = temp_gpacket->data.header.dst[1];
			 				temp_gpacket->data.header.src[2] = temp_gpacket->data.header.dst[2];
			 				temp_gpacket->data.header.src[3] = temp_gpacket->data.header.dst[3];
			 				temp_gpacket->data.header.src[4] = temp_gpacket->data.header.dst[4];
			 				temp_gpacket->data.header.src[5] = temp_gpacket->data.header.dst[5];

			 				temp_gpacket->data.header.dst[0] = 254;
			 				temp_gpacket->data.header.dst[1] = 253;
			 				temp_gpacket->data.header.dst[2] = 2;
			 				temp_gpacket->data.header.dst[3] = 0;
			 				temp_gpacket->data.header.dst[4] = 0;
			 				temp_gpacket->data.header.dst[5] = 3;

			 				temp_gpacket->data.header.src[0] = 254;
			 				temp_gpacket->data.header.src[1] = 253;
			 				temp_gpacket->data.header.src[2] = 03;
			 				temp_gpacket->data.header.src[3] = 01;
			 				temp_gpacket->data.header.src[4] = 0;
			 				temp_gpacket->data.header.src[5] = 1;
			 			}
			 printf("\n\n*********************CALLING WRITEQUEUE**** :: %d\n\n");

				writeQueue(outputQ, (void *)temp_gpacket, sizeof(gpacket_t));

			//Comparision logic
			//logic for placing packet in queue2
		}

	}
	return 0;
}
